const StationMemberModel = require('../models/stationMemberModel');

class StationMemberController {
  /**
   * Adiciona um membro √† station
   * POST /api/stations/:stationId/members
   */
  static async addMember(req, res, next) {
    try {
      const { stationId } = req.params;
      const { email, role } = req.body;

      const newMember = await StationMemberModel.addMember(stationId, email, role);

      res.status(201).json({
        message: 'Membro adicionado com sucesso √† station! üë®‚ÄçüöÄ',
        member: newMember
      });

    } catch (error) {
      if (error.message === 'Usu√°rio n√£o encontrado com este email') {
        return res.status(404).json({
          error: 'Usu√°rio n√£o encontrado',
          message: 'N√£o existe um usu√°rio cadastrado com este email'
        });
      }

      if (error.message === 'Usu√°rio j√° √© membro desta station') {
        return res.status(409).json({
          error: 'Usu√°rio j√° √© membro',
          message: 'Este usu√°rio j√° faz parte da station'
        });
      }

      next(error);
    }
  }

  /**
   * Lista todos os membros da station
   * GET /api/stations/:stationId/members
   */
  static async getMembers(req, res, next) {
    try {
      const { stationId } = req.params;

      const members = await StationMemberModel.getMembers(stationId);

      res.status(200).json({
        message: `${members.length} membros encontrados`,
        members
      });

    } catch (error) {
      next(error);
    }
  }

  /**
   * Atualiza o role de um membro
   * PUT /api/stations/:stationId/members/:userId
   */
  static async updateMemberRole(req, res, next) {
    try {
      const { stationId, userId } = req.params;
      const { role } = req.body;
      const currentUserRole = req.userRole;

      // Cara, n√£o pode alterar o role do owner da station
      if (req.station.owner_id === userId) {
        return res.status(400).json({
          error: 'Opera√ß√£o n√£o permitida',
          message: 'N√£o √© poss√≠vel alterar o role do owner da station'
        });
      }

      // Verifica se est√° tentando promover algu√©m para um role superior ao seu
      const roleHierarchy = { member: 1, leader: 2, admin: 3, owner: 4 };
      const currentUserLevel = roleHierarchy[currentUserRole];
      const targetRoleLevel = roleHierarchy[role];

      if (targetRoleLevel >= currentUserLevel) {
        return res.status(403).json({
          error: 'Permiss√£o insuficiente',
          message: 'Voc√™ n√£o pode promover algu√©m para um role igual ou superior ao seu'
        });
      }

      const updatedMember = await StationMemberModel.updateMemberRole(stationId, userId, role);

      res.status(200).json({
        message: 'Role do membro atualizado com sucesso!',
        member: updatedMember
      });

    } catch (error) {
      next(error);
    }
  }

  /**
   * Remove um membro da station
   * DELETE /api/stations/:stationId/members/:userId
   */
  static async removeMember(req, res, next) {
    try {
      const { stationId, userId } = req.params;

      // N√£o pode remover o owner da station
      if (req.station.owner_id === userId) {
        return res.status(400).json({
          error: 'Opera√ß√£o n√£o permitida',
          message: 'N√£o √© poss√≠vel remover o owner da station'
        });
      }

      // N√£o pode se remover
      if (req.user.id === userId) {
        return res.status(400).json({
          error: 'Opera√ß√£o n√£o permitida',
          message: 'Voc√™ n√£o pode se remover da station. Pe√ßa para um admin fazer isso.'
        });
      }

      await StationMemberModel.removeMember(stationId, userId);

      res.status(200).json({
        message: 'Membro removido da station com sucesso'
      });

    } catch (error) {
      next(error);
    }
  }
}

module.exports = StationMemberController;